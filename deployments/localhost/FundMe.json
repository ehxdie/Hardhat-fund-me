{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0dd0a1606c3efd01473701271e00d6b3730727a6ff0ebb81deaf4800c1aa6a0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "888866",
    "logsBloom": "0x
    "blockHash": "0x4336fdf438a47dfe7cf527eec9afe78c5a7326653c4bc68d4aab686316194cb3",
    "transactionHash": "0xd0dd0a1606c3efd01473701271e00d6b3730727a6ff0ebb81deaf4800c1aa6a0",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "888866",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "535c23c2c6b991622631f4288025421e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\n// This interface is provided by chainlink and allows for the getting\\n// of data from external datafeeds depending on the interface\\n\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract FundMe {\\n\\n    // Setting up a variable that will host the owners address\\n    address public owner;\\n\\n    // Ensuring that the address that deploys the contract is the owner of that\\n    // contract\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    // Adding the address of the price feed as an argument to the constructor, so that when the network is changed, to still get the same functionality only the \\\"pricefeed\\\" address would have to be changed\\n    constructor(address _priceFeed){\\n        owner =  msg.sender;\\n        priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    // Hmm I don't really get this \\n    using PriceConverter for uint256;\\n\\n    // Setting the minimum amount that can be sent to this contract\\n    uint256 minimumUsd = 10 * 1e18;\\n\\n    // Array that will hold the addresses of who has funded the contract\\n    address[] public funders;\\n\\n    // To get the amount that is being sent by an address\\n    mapping(address => uint256) public addressToAmount;\\n\\n    // Funding function\\n    /* Different Individuals can fund the contract*/\\n\\n    function fund() public payable {\\n        // Ensuring the amount  sent to the contract is > 1eth\\n        // 1e18 is the representation of 1eth in wei\\n        // msg.value is in wei\\n        \\n        // msg.value.getConversionRate() \\n        /* The msg.value acts as the first argument to the getConversionRate method\\n    adding a parameter in the brackets will act as a second*/\\n        require(msg.value.getConversionRate(priceFeed) > minimumUsd, \\\"Didnt send enough\\\");\\n\\n        // Adding the address of the funders to the funders array;\\n        funders.push(msg.sender);\\n\\n        // Keeping track of how much each address sends\\n        addressToAmount[msg.sender] = msg.value;\\n\\n    }\\n\\n    // Functions for Getting prices and converting from eth to usd \\n    // and vice versa\\n\\n    \\n    \\n    // Withdrawal function\\n    /* The owner of the contract can withdraw the funds sent to an \\n    Individual addresss */\\n\\n\\n    function withdraw () public onlyOwner{\\n        // This ensures that only the owner can withdraw\\n        require(msg.sender == owner, \\\"You can not withdraw\\\");\\n\\n        // When the owner of the contract withdraws from the contract then the array\\n        // that hosts the amount sent should be set to zero\\n         for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) \\n         {\\n             address fundersAddress = funders[funderIndex];\\n             addressToAmount[fundersAddress] = 0;\\n         }\\n\\n        // resetting the funders an array\\n        funders = new address[](0);\\n\\n        // withdrawing the funds\\n\\n        // transfer\\n        /*\\n        When transferring to another address first the address\\n        must be made payable, after then the <.transfer()> method\\n        is used\\n        payable(msg.sender).transfer(address(this).balance);\\n\\n        // send\\n        bool sendTransfer = payable(msg.sender).send(address(this).balance);\\n        require(sendTransfer,\\\"Transfer has not gone through\\\"); */\\n\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    modifier onlyOwner{\\n        require(msg.sender == owner, \\\"You can not withdraw\\\");\\n        _; \\n    }\\n\\n\\n}\\n \",\"keccak256\":\"0xf2c44c1e6e90234c066e40c5721e42f70ade0c4861cdbecf8c604e09c4b90014\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n\\n\\n    function getPrice (AggregatorV3Interface _priceFeed) internal view returns(uint256) {\\n        // Address of price feed contract 0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        // Using the interface to connect to a datafeed that exist on the sempoli testnet\\n\\n        //AggregatorV3Interface priceFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\\n\\n        // The <lastestRoundData()> method is used to get lastest prices of eth\\n        (,int256 price, , ,) = _priceFeed.latestRoundData();\\n\\n        /* to ensure the price in usd == msg.value (i dont 100% \\n        get but they should be similar in decimal places)\\n\\n        The interface <lastestRoundData()> method, returns eth price\\n        to 8 decimal places, but msg.value is in wei, so to the eth price\\n        is converted to wei\\n        */\\n\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate (uint256 _ethAmount, AggregatorV3Interface _priceFeed) internal view returns(uint256){\\n        // Getting the ethereum price by calling the get price function\\n        uint256 ethPrice = getPrice(_priceFeed);\\n        // Converting from wei to usd\\n        uint256 ethAmountInUsd = (ethPrice * _ethAmount)/ 1e18;\\n        return ethAmountInUsd;\\n    }\\n\\n}\\n \",\"keccak256\":\"0xca56f2cdc003f4d236ca1365b74a91006314254cf37ad8a371bbcec5ef09b5f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052678ac7230489e8000060025534801561001c57600080fd5b50604051610f46380380610f46833981810160405281019061003e9190610128565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610155565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100f5826100ca565b9050919050565b610105816100ea565b811461011057600080fd5b50565b600081519050610122816100fc565b92915050565b60006020828403121561013e5761013d6100c5565b5b600061014c84828501610113565b91505092915050565b610de2806101646000396000f3fe6080604052600436106100555760003560e01c80633c7e7d281461005a5780633ccfd60b14610097578063741bef1a146100ae5780638da5cb5b146100d9578063b60d428814610104578063dc0d3dff1461010e575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c91906107bc565b61014b565b60405161008e9190610802565b60405180910390f35b3480156100a357600080fd5b506100ac610163565b005b3480156100ba57600080fd5b506100c361043b565b6040516100d0919061087c565b60405180910390f35b3480156100e557600080fd5b506100ee610461565b6040516100fb91906108a6565b60405180910390f35b61010c610485565b005b34801561011a57600080fd5b50610135600480360381019061013091906108ed565b6105a6565b60405161014291906108a6565b60405180910390f35b60046020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e890610977565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461027f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027690610977565b60405180910390fd5b60005b60038054905081101561032b576000600382815481106102a5576102a4610997565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610323906109f5565b915050610282565b50600067ffffffffffffffff81111561034757610346610a3d565b5b6040519080825280602002602001820160405280156103755781602001602082028036833780820191505090505b506003908051906020019061038b9291906106b2565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103b290610a9d565b60006040518083038185875af1925050503d80600081146103ef576040519150601f19603f3d011682016040523d82523d6000602084013e6103f4565b606091505b5050905080610438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042f90610afe565b60405180910390fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002546104bd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105e590919063ffffffff16565b116104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f490610b6a565b60405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600381815481106105b657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105f183610621565b90506000670de0b6b3a7640000858361060a9190610b8a565b6106149190610bfb565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561066f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106939190610cb9565b5050509150506402540be400816106aa9190610d34565b915050919050565b82805482825590600052602060002090810192821561072b579160200282015b8281111561072a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106d2565b5b509050610738919061073c565b5090565b5b8082111561075557600081600090555060010161073d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107898261075e565b9050919050565b6107998161077e565b81146107a457600080fd5b50565b6000813590506107b681610790565b92915050565b6000602082840312156107d2576107d1610759565b5b60006107e0848285016107a7565b91505092915050565b6000819050919050565b6107fc816107e9565b82525050565b600060208201905061081760008301846107f3565b92915050565b6000819050919050565b600061084261083d6108388461075e565b61081d565b61075e565b9050919050565b600061085482610827565b9050919050565b600061086682610849565b9050919050565b6108768161085b565b82525050565b6000602082019050610891600083018461086d565b92915050565b6108a08161077e565b82525050565b60006020820190506108bb6000830184610897565b92915050565b6108ca816107e9565b81146108d557600080fd5b50565b6000813590506108e7816108c1565b92915050565b60006020828403121561090357610902610759565b5b6000610911848285016108d8565b91505092915050565b600082825260208201905092915050565b7f596f752063616e206e6f74207769746864726177000000000000000000000000600082015250565b600061096160148361091a565b915061096c8261092b565b602082019050919050565b6000602082019050818103600083015261099081610954565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a00826107e9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a3257610a316109c6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a87600083610a6c565b9150610a9282610a77565b600082019050919050565b6000610aa882610a7a565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ae8600b8361091a565b9150610af382610ab2565b602082019050919050565b60006020820190508181036000830152610b1781610adb565b9050919050565b7f4469646e742073656e6420656e6f756768000000000000000000000000000000600082015250565b6000610b5460118361091a565b9150610b5f82610b1e565b602082019050919050565b60006020820190508181036000830152610b8381610b47565b9050919050565b6000610b95826107e9565b9150610ba0836107e9565b9250828202610bae816107e9565b91508282048414831517610bc557610bc46109c6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c06826107e9565b9150610c11836107e9565b925082610c2157610c20610bcc565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c4b81610c2c565b8114610c5657600080fd5b50565b600081519050610c6881610c42565b92915050565b6000819050919050565b610c8181610c6e565b8114610c8c57600080fd5b50565b600081519050610c9e81610c78565b92915050565b600081519050610cb3816108c1565b92915050565b600080600080600060a08688031215610cd557610cd4610759565b5b6000610ce388828901610c59565b9550506020610cf488828901610c8f565b9450506040610d0588828901610ca4565b9350506060610d1688828901610ca4565b9250506080610d2788828901610c59565b9150509295509295909350565b6000610d3f82610c6e565b9150610d4a83610c6e565b9250828202610d5881610c6e565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d9057610d8f6109c6565b5b8282058414831517610da557610da46109c6565b5b509291505056fea26469706673582212206fbf842f45c182c0cff010f0f46e37052137a1e65f95421d5251320d59242a0364736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c80633c7e7d281461005a5780633ccfd60b14610097578063741bef1a146100ae5780638da5cb5b146100d9578063b60d428814610104578063dc0d3dff1461010e575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c91906107bc565b61014b565b60405161008e9190610802565b60405180910390f35b3480156100a357600080fd5b506100ac610163565b005b3480156100ba57600080fd5b506100c361043b565b6040516100d0919061087c565b60405180910390f35b3480156100e557600080fd5b506100ee610461565b6040516100fb91906108a6565b60405180910390f35b61010c610485565b005b34801561011a57600080fd5b50610135600480360381019061013091906108ed565b6105a6565b60405161014291906108a6565b60405180910390f35b60046020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e890610977565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461027f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027690610977565b60405180910390fd5b60005b60038054905081101561032b576000600382815481106102a5576102a4610997565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610323906109f5565b915050610282565b50600067ffffffffffffffff81111561034757610346610a3d565b5b6040519080825280602002602001820160405280156103755781602001602082028036833780820191505090505b506003908051906020019061038b9291906106b2565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103b290610a9d565b60006040518083038185875af1925050503d80600081146103ef576040519150601f19603f3d011682016040523d82523d6000602084013e6103f4565b606091505b5050905080610438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042f90610afe565b60405180910390fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002546104bd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105e590919063ffffffff16565b116104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f490610b6a565b60405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600381815481106105b657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105f183610621565b90506000670de0b6b3a7640000858361060a9190610b8a565b6106149190610bfb565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561066f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106939190610cb9565b5050509150506402540be400816106aa9190610d34565b915050919050565b82805482825590600052602060002090810192821561072b579160200282015b8281111561072a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106d2565b5b509050610738919061073c565b5090565b5b8082111561075557600081600090555060010161073d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107898261075e565b9050919050565b6107998161077e565b81146107a457600080fd5b50565b6000813590506107b681610790565b92915050565b6000602082840312156107d2576107d1610759565b5b60006107e0848285016107a7565b91505092915050565b6000819050919050565b6107fc816107e9565b82525050565b600060208201905061081760008301846107f3565b92915050565b6000819050919050565b600061084261083d6108388461075e565b61081d565b61075e565b9050919050565b600061085482610827565b9050919050565b600061086682610849565b9050919050565b6108768161085b565b82525050565b6000602082019050610891600083018461086d565b92915050565b6108a08161077e565b82525050565b60006020820190506108bb6000830184610897565b92915050565b6108ca816107e9565b81146108d557600080fd5b50565b6000813590506108e7816108c1565b92915050565b60006020828403121561090357610902610759565b5b6000610911848285016108d8565b91505092915050565b600082825260208201905092915050565b7f596f752063616e206e6f74207769746864726177000000000000000000000000600082015250565b600061096160148361091a565b915061096c8261092b565b602082019050919050565b6000602082019050818103600083015261099081610954565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a00826107e9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a3257610a316109c6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a87600083610a6c565b9150610a9282610a77565b600082019050919050565b6000610aa882610a7a565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ae8600b8361091a565b9150610af382610ab2565b602082019050919050565b60006020820190508181036000830152610b1781610adb565b9050919050565b7f4469646e742073656e6420656e6f756768000000000000000000000000000000600082015250565b6000610b5460118361091a565b9150610b5f82610b1e565b602082019050919050565b60006020820190508181036000830152610b8381610b47565b9050919050565b6000610b95826107e9565b9150610ba0836107e9565b9250828202610bae816107e9565b91508282048414831517610bc557610bc46109c6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c06826107e9565b9150610c11836107e9565b925082610c2157610c20610bcc565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c4b81610c2c565b8114610c5657600080fd5b50565b600081519050610c6881610c42565b92915050565b6000819050919050565b610c8181610c6e565b8114610c8c57600080fd5b50565b600081519050610c9e81610c78565b92915050565b600081519050610cb3816108c1565b92915050565b600080600080600060a08688031215610cd557610cd4610759565b5b6000610ce388828901610c59565b9550506020610cf488828901610c8f565b9450506040610d0588828901610ca4565b9350506060610d1688828901610ca4565b9250506080610d2788828901610c59565b9150509295509295909350565b6000610d3f82610c6e565b9150610d4a83610c6e565b9250828202610d5881610c6e565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d9057610d8f6109c6565b5b8282058414831517610da557610da46109c6565b5b509291505056fea26469706673582212206fbf842f45c182c0cff010f0f46e37052137a1e65f95421d5251320d59242a0364736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 51,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 54,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 79,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "minimumUsd",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 82,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 86,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}